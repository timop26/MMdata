hampton_list <- list(
transform_archived_data(2015, 0)[[1]][transform_archived_data(2015, 0)[[1]]$team_id == "hampton", ],
transform_archived_data(2015, 18)[[1]][transform_archived_data(2015, 18)[[1]]$team_id == "hampton", ],
school_summary_by_year("hampton", 2015),
team_stats(scrape_game_logs("hampton", 2015), "hampton", 2015)
) %>% do.call(what="merge", args=list(by="team_id"))
hampton_list <- transform_archived_data(2015, 0)[[1]][transform_archived_data(2015, 0)[[1]]$team_id == "hampton", ] %>%
merge(transform_archived_data(2015, 18)[[1]][transform_archived_data(2015, 18)[[1]]$team_id == "hampton", ], by="team_id") %>%
merge(school_summary_by_year("hampton", 2015), by="team_id") %>%
merge(team_stats(scrape_game_logs("hampton", 2015), "hampton", 2015), by="team_id")
hampton_list
?merge
colnames(all_data)[!colnames(all_data) %in% colnames(hampton_list)]
hampton_list$year <- 2015
hampton_list$year <- 2015
colnames(all_data)[!colnames(all_data) %in% colnames(hampton_list)]
colnames(hampton_list)[!colnames(hampton_list) %in% colnames(all_data)]
hampton_list <- hampton_list[, colnames(all_data)]
head(all-data)
head(all_data)
head(hampton_list)
woof <- rbind(all_data, hampton_list)
View(woof[woof$team_id == "hampton", ])
all_data <- woof
rm(woof)
rm(hampton_list)
away_team_stats <- merge(tournaments[, tourney_cols], all_data, by.x=c("away_team_id", "year"), by.y=c("team_id", "year"))
home_team_stats <- merge(tournaments[, tourney_cols], all_data, by.x=c("home_team_id", "year"), by.y=c("team_id", "year"))
away_team_stats <- merge(tournaments[, tourney_cols], all_data, by.x=c("away_team_id", "year"), by.y=c("team_id", "year"))
home_team_stats <- home_team_stats[order(home_team_stats$row), ]
away_team_stats <- away_team_stats[order(away_team_stats$row), ]
all_training <- home_team_stats
all_training[, 9:ncol(all_training)] <- home_team_stats[, 9:ncol(all_training)] - away_team_stats[, 9:ncol(all_training)]
View(all_training)
View(all_training[!complete.cases(all_training), ])
training <- read.csv("all_training.csv")
years <- c(2011:2019, 2021)
combine_data <- function(years) {
# Preseasons rankings
pre_rankings <- lapply(years, function(x) transform_archived_data(year=x, 0)[[1]])
# Columns that are in each year
pre_cols <- Reduce(intersect, lapply(pre_rankings, colnames))
# Combining preseason ranking data
pre_rankings <- do.call("rbind", lapply(pre_rankings, function(x) x[, pre_cols]))
# Removing "Week" column
pre_rankings <- pre_rankings[, which(colnames(pre_rankings) != "Week")]
# Selection Sunday weeks
selection_sunday_weeks <- data.frame(
selection_sunday=c(18, 18, 19, 19, 18, 18, 18, 18, 19, 18, 16),
year=c(2011:2021)
)
# Selection Sunday rankings
final_rankings <- lapply(
years,
function(x) {
transform_archived_data(
year=x,
selection_sunday_weeks$selection_sunday[selection_sunday_weeks$year == x]
)[[1]]
}
)
# Columns that are in each year
final_cols <- Reduce(intersect, lapply(final_rankings, colnames))
# Combining selection Sunday ranking data
final_rankings <- do.call("rbind", lapply(final_rankings, function(x) x[, final_cols]))
# Removing "Week" column
final_rankings <- final_rankings[, which(colnames(final_rankings) != "Week")]
# Team Summaries
team_summaries <- lapply(years, all_summaries_by_year) %>% do.call(what="rbind")
# Team Stats
team_stats <- lapply(years, all_teams_stats) %>% do.call(what="rbind")
# Merging all data together
all_data <- merge(team_stats, team_summaries, by=c("team_id", "year"))
all_data <- merge(all_data, pre_rankings, by=c("team_id", "year"))
all_data <- merge(all_data, final_rankings, by=c("team_id", "year"))
# Removing any columns with missing data
all_data <- all_data[, apply(all_data, 2, function(x) mean(is.na(x)) == 0)]
all_data <- all_data[, !colnames(all_data) %in% c("conf", "coach")]
return(all_data)
}
system.time(all_data <- combine_data(c(2011:2019, 2021)))
devtools::load_all(".")
years <- c(2011:2019, 2021)
combine_data <- function(years) {
# Preseasons rankings
pre_rankings <- lapply(years, function(x) transform_archived_data(year=x, 0)[[1]])
# Columns that are in each year
pre_cols <- Reduce(intersect, lapply(pre_rankings, colnames))
# Combining preseason ranking data
pre_rankings <- do.call("rbind", lapply(pre_rankings, function(x) x[, pre_cols]))
# Removing "Week" column
pre_rankings <- pre_rankings[, which(colnames(pre_rankings) != "Week")]
# Selection Sunday weeks
selection_sunday_weeks <- data.frame(
selection_sunday=c(18, 18, 19, 19, 18, 18, 18, 18, 19, 18, 16),
year=c(2011:2021)
)
# Selection Sunday rankings
final_rankings <- lapply(
years,
function(x) {
transform_archived_data(
year=x,
selection_sunday_weeks$selection_sunday[selection_sunday_weeks$year == x]
)[[1]]
}
)
# Columns that are in each year
final_cols <- Reduce(intersect, lapply(final_rankings, colnames))
# Combining selection Sunday ranking data
final_rankings <- do.call("rbind", lapply(final_rankings, function(x) x[, final_cols]))
# Removing "Week" column
final_rankings <- final_rankings[, which(colnames(final_rankings) != "Week")]
# Team Summaries
team_summaries <- lapply(years, all_summaries_by_year) %>% do.call(what="rbind")
# Team Stats
team_stats <- lapply(years, all_teams_stats) %>% do.call(what="rbind")
# Merging all data together
all_data <- merge(team_stats, team_summaries, by=c("team_id", "year"))
all_data <- merge(all_data, pre_rankings, by=c("team_id", "year"))
all_data <- merge(all_data, final_rankings, by=c("team_id", "year"))
# Removing any columns with missing data
all_data <- all_data[, apply(all_data, 2, function(x) mean(is.na(x)) == 0)]
all_data <- all_data[, !colnames(all_data) %in% c("conf", "coach")]
return(all_data)
}
system.time(all_data <- combine_data(c(2011:2019, 2021)))
View(all_data[all_data$team_id == "hampton", ])
# Reading in tournament data
tournaments <- lapply(c(2011:2019, 2021), scrape_tournament) %>% do.call(what="rbind")
tournaments$row <- 1:nrow(tournaments)
tourney_cols <- c("row", "home_team_id", "away_team_id", "year", "round", "seed_diff", "score_diff", "home_win")
home_team_stats <- merge(tournaments[, tourney_cols], all_data, by.x=c("home_team_id", "year"), by.y=c("team_id", "year"))
away_team_stats <- merge(tournaments[, tourney_cols], all_data, by.x=c("away_team_id", "year"), by.y=c("team_id", "year"))
home_team_stats <- home_team_stats[order(home_team_stats$row), ]
away_team_stats <- away_team_stats[order(away_team_stats$row), ]
all_training <- home_team_stats
all_training[, 9:ncol(all_training)] <- home_team_stats[, 9:ncol(all_training)] - away_team_stats[, 9:ncol(all_training)]
View(all_training[!complete.cases(all_training), ])
write.csv(all_training, "all_training.csv", row.names=FALSE)
woof <- read.csv("all_training.csv")
training <- read.csv("all_training.csv")
cor(training)
View(training)
cor(training[, 5:ncol(training)])
cor(training[, 5:ncol(training)])[, "score_diff"]
sort(cor(training[, 5:ncol(training)])[, "score_diff"])
sort(cor(training[, 5:ncol(training)])[, "home_win"])
test <- training[training$year == 2021, ]
train <- training[training$year != 2021, ]
fit_glm <- glm(home_win ~ ., data=train[, c(2, 5, 6, 8:ncol(train))], family="binomial")
summary(fit_glm)
install.packages(pROC)
install.packages("pROC")
library(pROC)
roc(fit_glm$fitted.values, train$home_win)
roc(train$home_win, fit_glm$fitted.values)
roc(test$home_win, predict(fit_glm, test))
test <- training[training$year == 2019, ]
train <- training[training$year != 2019, ]
fit_glm <- glm(home_win ~ ., data=train[, c(2, 5, 6, 8:ncol(train))], family="binomial")
roc(train$home_win, fit_glm$fitted.values)
roc(test$home_win, predict(fit_glm, test))
test <- training[training$year == 2021, ]
train <- training[training$year != 2021, ]
fit_glm <- glm(home_win ~ ., data=train[, c(2, 5, 6, 8:ncol(train))], family="binomial")
roc(train$home_win, fit_glm$fitted.values)
roc(test$home_win, predict(fit_glm, test))
# Parameters for lightgbm
param_list <- list(
num_leaves=4L,
learning_rate=1.0,
objective="binary"
)
library(lightgbm)
install.packages("lightgbm")
# Parameters for lightgbm
param_list <- list(
num_leaves=4L,
learning_rate=1.0,
objective="binary"
)
# Training lightgbm model
gbm_mdl <- lightgbm(
data=as.matrix(train[, c(2, 5, 6, 9:ncol(train))])
, params=param_list
, label=train$home_win
, nrounds=ntrees
, verbose=0
)
library(lightgbm)
# Training lightgbm model
gbm_mdl <- lightgbm(
data=as.matrix(train[, c(2, 5, 6, 9:ncol(train))])
, params=param_list
, label=train$home_win
, nrounds=ntrees
, verbose=0
)
# Training lightgbm model
gbm_mdl <- lightgbm(
data=as.matrix(train[, c(2, 5, 6, 9:ncol(train))])
, params=param_list
, label=train$home_win
, nrounds=100
, verbose=0
)
# Feature importance
lgb.plot.importance(lgb.importance(gbm_mdl), measure="Gain")
preds <- predict(gbm_mdl, as.matrix(test[, c(2, 5, 6, 9:ncol(test))]))
mean(round(preds) == test$home_win)
plot(train$MAS_0, train$home_win)
scatter.smooth(train$MAS_0, train$home_win)
# Training lightgbm model
gbm_mdl <- lightgbm(
data=as.matrix(train[, c(2, 5, 6, 9:ncol(train))]),
params=param_list,
label=train$home_win,
nrounds=200,
verbose=0
)
# Feature importance
lgb.plot.importance(lgb.importance(gbm_mdl), measure="Gain")
preds <- predict(gbm_mdl, as.matrix(test[, c(2, 5, 6, 9:ncol(test))]))
mean(round(preds) == test$home_win)
# Training lightgbm model
gbm_mdl <- lightgbm(
data=as.matrix(train[, c(2, 5, 6, 9:ncol(train))]),
params=param_list,
label=train$home_win,
nrounds=400,
verbose=0
)
# Feature importance
lgb.plot.importance(lgb.importance(gbm_mdl), measure="Gain")
preds <- predict(gbm_mdl, as.matrix(test[, c(2, 5, 6, 9:ncol(test))]))
mean(round(preds) == test$home_win)
# Training lightgbm model
gbm_mdl <- lightgbm(
data=as.matrix(train[, c(2, 5, 6, 9:ncol(train))]),
params=param_list,
label=train$home_win,
nrounds=200,
verbose=0
)
# Feature importance
lgb.plot.importance(lgb.importance(gbm_mdl), measure="Gain")
preds <- predict(gbm_mdl, as.matrix(test[, c(2, 5, 6, 9:ncol(test))]))
mean(round(preds) == test$home_win)
?lightgbm
# Parameters for lightgbm
param_list <- list(
max_depth=4,
learning_rate=1.0,
objective="binary"
)
# Training lightgbm model
gbm_mdl <- lightgbm(
data=as.matrix(train[, c(2, 5, 6, 9:ncol(train))]),
params=param_list,
label=train$home_win,
nrounds=200,
verbose=0
)
# Feature importance
lgb.plot.importance(lgb.importance(gbm_mdl), measure="Gain")
preds <- predict(gbm_mdl, as.matrix(test[, c(2, 5, 6, 9:ncol(test))]))
mean(round(preds) == test$home_win)
# Training lightgbm model
gbm_mdl <- lightgbm(
data=as.matrix(train[, c(2, 5, 6, 9:ncol(train))]),
params=param_list,
label=train$home_win,
nrounds=100,
verbose=0
)
# Feature importance
lgb.plot.importance(lgb.importance(gbm_mdl), measure="Gain")
# Parameters for lightgbm
param_list <- list(
max_depth=4,
learning_rate=0.2,
objective="binary"
)
# Training lightgbm model
gbm_mdl <- lightgbm(
data=as.matrix(train[, c(2, 5, 6, 9:ncol(train))]),
params=param_list,
label=train$home_win,
nrounds=100,
verbose=0
)
# Feature importance
lgb.plot.importance(lgb.importance(gbm_mdl), measure="Gain")
preds <- predict(gbm_mdl, as.matrix(test[, c(2, 5, 6, 9:ncol(test))]))
mean(round(preds) == test$home_win)
# Parameters for lightgbm
param_list <- list(
max_leaves=6,
max_depth=4,
learning_rate=0.2,
objective="binary"
)
# Training lightgbm model
gbm_mdl <- lightgbm(
data=as.matrix(train[, c(2, 5, 6, 9:ncol(train))]),
params=param_list,
label=train$home_win,
nrounds=100,
verbose=0
)
# Feature importance
lgb.plot.importance(lgb.importance(gbm_mdl), measure="Gain")
preds <- predict(gbm_mdl, as.matrix(test[, c(2, 5, 6, 9:ncol(test))]))
mean(round(preds) == test$home_win)
# Training lightgbm model
gbm_mdl <- lightgbm(
data=as.matrix(train[, c(2, 5, 6, 9:ncol(train))]),
params=param_list,
label=train$home_win,
nrounds=101,
verbose=0
)
# Training lightgbm model
gbm_mdl <- lightgbm(
data=as.matrix(train[, c(2, 5, 6, 9:ncol(train))]),
params=param_list,
label=train$home_win,
nrounds=105,
verbose=0
)
# Training lightgbm model
gbm_mdl <- lightgbm(
data=as.matrix(train[, c(2, 5, 6, 9:ncol(train))]),
params=param_list,
label=train$home_win,
nrounds=110,
verbose=0
)
# Feature importance
lgb.plot.importance(lgb.importance(gbm_mdl), measure="Gain")
preds <- predict(gbm_mdl, as.matrix(test[, c(2, 5, 6, 9:ncol(test))]))
mean(round(preds) == test$home_win)
# Parameters for lightgbm
param_list <- list(
max_leaves=6,
max_depth=4,
learning_rate=0.1,
objective="binary"
)
# Training lightgbm model
gbm_mdl <- lightgbm(
data=as.matrix(train[, c(2, 5, 6, 9:ncol(train))]),
params=param_list,
label=train$home_win,
nrounds=100,
verbose=0
)
# Feature importance
lgb.plot.importance(lgb.importance(gbm_mdl), measure="Gain")
preds <- predict(gbm_mdl, as.matrix(test[, c(2, 5, 6, 9:ncol(test))]))
mean(round(preds) == test$home_win)
# Parameters for lightgbm
param_list <- list(
max_leaves=6,
max_depth=4,
learning_rate=0.1,
objective="binary"
)
# Training lightgbm model
gbm_mdl <- lightgbm(
data=as.matrix(train[, c(2, 5, 6, 9:ncol(train))]),
params=param_list,
label=train$home_win,
nrounds=200,
verbose=0
)
# Feature importance
lgb.plot.importance(lgb.importance(gbm_mdl), measure="Gain")
preds <- predict(gbm_mdl, as.matrix(test[, c(2, 5, 6, 9:ncol(test))]))
mean(round(preds) == test$home_win)
test <- training[training$year == 2019, ]
train <- training[training$year != 2019, ]
# Parameters for lightgbm
param_list <- list(
max_leaves=6,
max_depth=4,
learning_rate=0.1,
objective="binary"
)
# Training lightgbm model
gbm_mdl <- lightgbm(
data=as.matrix(train[, c(2, 5, 6, 9:ncol(train))]),
params=param_list,
label=train$home_win,
nrounds=200,
verbose=0
)
# Feature importance
lgb.plot.importance(lgb.importance(gbm_mdl), measure="Gain")
preds <- predict(gbm_mdl, as.matrix(test[, c(2, 5, 6, 9:ncol(test))]))
mean(round(preds) == test$home_win)
plot(training$score_diff, training$gini)
gini(training$score_diff, training$gini)
cor(training$score_diff, training$gini)
cor(training$score_diff, training$ORTG)
cor(training$score_diff, training$F0_min)
test <- training[training$year == 2018, ]
train <- training[training$year != 2018, ]
# Training lightgbm model
gbm_mdl <- lightgbm(
data=as.matrix(train[, c(2, 5, 6, 9:ncol(train))]),
params=param_list,
label=train$home_win,
nrounds=200,
verbose=0
)
# Feature importance
lgb.plot.importance(lgb.importance(gbm_mdl), measure="Gain")
preds <- predict(gbm_mdl, as.matrix(test[, c(2, 5, 6, 9:ncol(test))]))
mean(round(preds) == test$home_win)
test <- training[training$year == 2021, ]
train <- training[training$year != 2021, ]
# Training lightgbm model
gbm_mdl <- lightgbm(
data=as.matrix(train[train$round == 1, c(2, 5, 6, 9:ncol(train))]),
params=param_list,
label=train$home_win,
nrounds=200,
verbose=0
)
# Training lightgbm model
gbm_mdl <- lightgbm(
data=as.matrix(train[train$round == 1, c(2, 5, 6, 9:ncol(train))]),
params=param_list,
label=train$home_win[train$round == 1],
nrounds=200,
verbose=0
)
# Feature importance
lgb.plot.importance(lgb.importance(gbm_mdl), measure="Gain")
preds <- predict(gbm_mdl, as.matrix(test[train$round == 1, c(2, 5, 6, 9:ncol(test))]))
mean(round(preds) == test$home_win[train$round == 1])
preds <- predict(gbm_mdl, as.matrix(test[test$round == 1, c(2, 5, 6, 9:ncol(test))]))
mean(round(preds) == test$home_win[train$round == 1])
mean(round(preds) == test$home_win[test$round == 1])
preds <- predict(gbm_mdl, as.matrix(test[test$round == 1, c(2, 5, 6, 9:ncol(test))]))
mean(round(preds) == test$home_win[test$round == 1])
# Training lightgbm model
gbm_mdl <- lightgbm(
data=as.matrix(train[train$round == 1, c(2, 5, 6, 9:ncol(train))]),
params=param_list,
label=train$home_win[train$round == 1],
nrounds=100,
verbose=0
)
# Feature importance
lgb.plot.importance(lgb.importance(gbm_mdl), measure="Gain")
preds <- predict(gbm_mdl, as.matrix(test[test$round == 1, c(2, 5, 6, 9:ncol(test))]))
mean(round(preds) == test$home_win[test$round == 1])
test <- training[training$year == 2019, ]
train <- training[training$year != 2019, ]
# Training lightgbm model
gbm_mdl <- lightgbm(
data=as.matrix(train[train$round == 1, c(2, 5, 6, 9:ncol(train))]),
params=param_list,
label=train$home_win[train$round == 1],
nrounds=100,
verbose=0
)
# Feature importance
lgb.plot.importance(lgb.importance(gbm_mdl), measure="Gain")
preds <- predict(gbm_mdl, as.matrix(test[test$round == 1, c(2, 5, 6, 9:ncol(test))]))
mean(round(preds) == test$home_win[test$round == 1])
# Training lightgbm model
gbm_mdl <- lightgbm(
data=as.matrix(train[, c(2, 5, 6, 9:ncol(train))]),
params=param_list,
label=train$home_win,
nrounds=100,
verbose=0
)
# Feature importance
lgb.plot.importance(lgb.importance(gbm_mdl), measure="Gain")
preds <- predict(gbm_mdl, as.matrix(test[test$round == 1, c(2, 5, 6, 9:ncol(test))]))
mean(round(preds) == test$home_win[test$round == 1])
test <- training[training$year == 2021, ]
train <- training[training$year != 2021, ]
# Parameters for lightgbm
param_list <- list(
max_leaves=6,
max_depth=4,
learning_rate=0.1,
objective="binary"
)
# Training lightgbm model
gbm_mdl <- lightgbm(
data=as.matrix(train[, c(2, 5, 6, 9:ncol(train))]),
params=param_list,
label=train$home_win,
nrounds=100,
verbose=0
)
# Feature importance
lgb.plot.importance(lgb.importance(gbm_mdl), measure="Gain")
preds <- predict(gbm_mdl, as.matrix(test[test$round == 1, c(2, 5, 6, 9:ncol(test))]))
mean(round(preds) == test$home_win[test$round == 1])
roc(test$home_win, predict(fit_glm, test))
# Setting working directory
setwd("Google Drive/Personal/Stats Projects/March_Madness/SR_Model/")
# Setting working directory
setwd("Google Drive/Personal/Stats Projects/March_Madness/SR_Model/")
